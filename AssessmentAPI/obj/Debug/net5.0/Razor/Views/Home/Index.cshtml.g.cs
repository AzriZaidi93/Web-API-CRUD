#pragma checksum "C:\Users\5004123676\source\repos\AssessmentAPI\AssessmentAPI\Views\Home\Index.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "a632c549bb647dc7d7d7e332f74fa964afabdad6450e1a617a626dd252858457"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"a632c549bb647dc7d7d7e332f74fa964afabdad6450e1a617a626dd252858457", @"/Views/Home/Index.cshtml")]
    #nullable restore
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a632c549bb647dc7d7d7e332f74fa964afabdad6450e1a617a626dd2528584572864", async() => {
                WriteLiteral(@"
    <style>
        #customers {
            font-family: Arial, Helvetica, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

            #customers td, #customers th {
                border: 1px solid #ddd;
                padding: 8px;
            }

            #customers tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            #customers tr:hover {
                background-color: #ddd;
            }

            #customers th {
                padding-top: 12px;
                padding-bottom: 12px;
                text-align: left;
                background-color: #04AA6D;
                color: white;
            }
    </style>

    <link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"">
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js""></script>
    <script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstr");
                WriteLiteral(@"ap.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js""></script>
    <script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/sweetalert2@9.3.4/dist/sweetalert2.all.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/sweetalert2@10""></script>

    <script type=""text/javascript"">
            // Make a request to the Web API
        $(document).ready(function () {
            fetch('http://localhost:25988/api/user')
                .then(response => response.json())
                .then(data => {
                    const table = document.getElementById('tby1')

                    // Loop through the data and populate the table
                    data.forEach(item => {
                        const row = table.insertRow();
                        const cell1 = row.insertCell(0);
                        const cell2 = row.insertCell(1);
                        const cell3 ");
                WriteLiteral(@"= row.insertCell(2);
                        const cell4 = row.insertCell(3);
                        const cell5 = row.insertCell(4);
                        const cell6 = row.insertCell(5);
                        const cell7 = row.insertCell(6);

                        cell1.innerHTML = item.userid;
                        cell2.innerHTML = item.username;
                        cell3.innerHTML = item.email;
                        cell4.innerHTML = item.phoneNo;
                        cell5.innerHTML = item.skillsets;
                        cell6.innerHTML = item.hobby;
                        cell7.innerHTML = `
                            <td style=""text-align:center"">
                                <a href=""#"" class=""ui-icon-pencil"" data-id=""${item.userid}"">
                                    <span class=""glyphicon glyphicon-pencil""></span>
                                </a>
                                &nbsp;&nbsp;&nbsp;&nbsp;
                                <a href=""#"" cla");
                WriteLiteral(@"ss=""ui-icon-trash"" data-id=""${item.userid}"">
                                    <span class=""glyphicon glyphicon-trash""></span>
                                </a>
                            </td>
                        `;
                    });
                })
                .catch(error => console.error('Error fetching data:', error));
        });

        // Use event delegation for ""Edit"" buttons
        $(document).on('click', '.ui-icon-pencil', function () {
            const rowid = $(this).closest('a').data('id');
            editRow(rowid);
        });

        $(document).on('click', '.ui-icon-trash', function () {
            const rowid = $(this).closest('a').data('id');
            deleteRow(rowid);
        });

        function editRow(rowid) {
            const row = $(""#tby1"").find(`[data-id=""${rowid}""]`).closest('tr');
            const username = row.find('td:eq(1)').text();
            const email = row.find('td:eq(2)').text();
            const phoneNo = r");
                WriteLiteral(@"ow.find('td:eq(3)').text();
            const skillsets = row.find('td:eq(4)').text();
            const hobby = row.find('td:eq(5)').text();

            $(""#h_userid"").val(rowid);
            $(""#h_username"").val(username);
            $(""#h_email"").val(email);
            $(""#h_phoneNo"").val(phoneNo);
            $(""#h_skillsets"").val(skillsets);
            $(""#h_hobby"").val(hobby);
            
            console.log(""Username:"", username);
            console.log(""Email:"", email);
            console.log(""Phone Number:"", phoneNo);
            console.log(""Skillsets:"", skillsets);
            console.log(""Hobby:"", hobby);

            sweetAlertEdit();
        }

        function addRow(rowid) {

            sweetAlertAdd();
        }

        function sweetAlertEdit() {
            (async () => {
                // Get the value from the element with id ""h_hobby""
                const useridValue = $(""#h_userid"").val();
                const usernameValue = $(""#h_username"")");
                WriteLiteral(@".val();
                const emailValue = $(""#h_email"").val();
                const phoneNoValue = $(""#h_phoneNo"").val();
                const skillValue = $(""#h_skillsets"").val();
                const hoobyValue = $(""#h_hobby"").val();




                const { value: formValues } = await Swal.fire({
                    title: 'Update User',
                    html: `
                            <input id=""swal-input1"" class=""swal2-input"" value=""${useridValue}"" style=""background-color: lightgrey;"" disabled>
                            <input id=""swal-input2"" class=""swal2-input"" value=""${usernameValue}"" placeholder=""Enter Your UserName"">
                            <input id=""swal-input3"" class=""swal2-input"" type=""email"" value=""${emailValue}"" placeholder=""Enter Your Email"">
                            <input id=""swal-input4"" class=""swal2-input"" value=""${phoneNoValue}"" placeholder=""Enter Your Phone Number"">
                            <input id=""swal-input5"" class=""swal2-input"" value=""${s");
                WriteLiteral(@"killValue}"" placeholder=""Enter Your Skill"">
                            <input id=""swal-input6"" class=""swal2-input"" value=""${hoobyValue}"" placeholder=""Enter Your Hobby"">
                    `,
                    focusConfirm: false,
                    preConfirm: () => {
                        return [
                            document.getElementById('swal-input1').value,
                            document.getElementById('swal-input2').value,
                            document.getElementById('swal-input3').value,
                            document.getElementById('swal-input4').value,
                            document.getElementById('swal-input5').value,
                            document.getElementById('swal-input6').value

                        ]
                    }
                })

                if (formValues) {
                    // Create an object with the updated data
                    const updatedData = {
                        userid: formValues[0],");
                WriteLiteral(@"
                        username: formValues[1],
                        email: formValues[2],
                        phoneNo: formValues[3],
                        skillset: formValues[4],
                        hobby: formValues[5]
                    };

                    // Make a PUT request to your Web API endpoint to update the data
                    $.ajax({
                        url: 'http://localhost:25988/api/user', // Replace with your API endpoint
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(updatedData),
                        success: function (response) {
                            Swal.fire('Data Updated Successfully', '', 'success');
                            fetchAndUpdateTable();
                        },
                        error: function (error) {
                            Swal.fire('Error Updating Data', error.responseText, 'error');
                    ");
                WriteLiteral(@"    }
                    });
                }

            })();
        }

        function deleteRow(rowid) {
            

            sweetAlertDel(rowid);
        }

        function sweetAlertAdd() {
            (async () => {


                const { value: formValues } = await Swal.fire({
                    title: 'Add User',
                    html: `
                                            <input id=""swal-input2"" class=""swal2-input"" placeholder=""Enter Your UserName"">
                                            <input id=""swal-input3"" class=""swal2-input"" type=""email"" placeholder=""Enter Your Email"">
                                            <input id=""swal-input4"" class=""swal2-input"" placeholder=""Enter Your Phone Number"">
                                            <input id=""swal-input5"" class=""swal2-input"" placeholder=""Enter Your Skill"">
                                            <input id=""swal-input6"" class=""swal2-input"" placeholder=""Enter Your Hobby"">
        ");
                WriteLiteral(@"                    `,
                    focusConfirm: false,
                    preConfirm: () => {
                        return [
                            
                            document.getElementById('swal-input2').value,
                            document.getElementById('swal-input3').value,
                            document.getElementById('swal-input4').value,
                            document.getElementById('swal-input5').value,
                            document.getElementById('swal-input6').value

                        ]
                    }
                })

                if (formValues) {
                    // Create an object with the updated data
                    const addData = {
                        
                        username: formValues[0],
                        email: formValues[1],
                        phoneNo: formValues[2],
                        skillset: formValues[3],
                        hobby: formValues[4]
");
                WriteLiteral(@"                    };

                    // Make a PUT request to your Web API endpoint to update the data
                    $.ajax({
                        url: 'http://localhost:25988/api/user', // Replace with your API endpoint
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(addData),
                        success: function (response) {
                            Swal.fire('Data Added Successfully', '', 'success');
                            fetchAndUpdateTable();
                        },
                        error: function (error) {
                            Swal.fire('Error Updating Data', error.responseText, 'error');
                        }
                    });
                }

            })();
        }

        function sweetAlertDel(userId) {
            console.log('Starting sweetAlertDel function');
            console.log('userId:', userId);

            S");
                WriteLiteral(@"wal.fire({
                title: 'Are you sure?',
                text: ""You won't be able to revert this!"",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                console.log('Result:', result);

                if (result.isConfirmed) {
                    console.log('User confirmed deletion');

                    // Include the userId in the URL for the DELETE request
                    $.ajax({
                        url: `http://localhost:25988/api/user/${userId}`, // Replace with your API endpoint
                        type: 'DELETE',
                        success: function (response) {
                            // Handle success
                            Swal.fire('Data Deleted Successfully', '', 'success');
                            fetchAndUpdateTable(); // ");
                WriteLiteral(@"Refresh the table after deletion
                        },
                        error: function (error) {
                            // Handle error
                            Swal.fire('Error Deleting Data', error.responseText, 'error');
                        }
                    });
                } else {
                    console.log('User canceled deletion');
                }
            });
        }


        function fetchAndUpdateTable() {
            // Make a GET request to fetch the latest data
            $.get('http://localhost:25988/api/user', function (data) {
                const table = document.getElementById('tby1');
                // Clear the existing table rows
                table.innerHTML = '';

                // Loop through the data and populate the table
                data.forEach(item => {
                    const row = table.insertRow();
                    const cell1 = row.insertCell(0);
                    const cell2 = row.insertC");
                WriteLiteral(@"ell(1);
                    const cell3 = row.insertCell(2);
                    const cell4 = row.insertCell(3);
                    const cell5 = row.insertCell(4);
                    const cell6 = row.insertCell(5);
                    const cell7 = row.insertCell(6);

                    cell1.innerHTML = item.userid;
                    cell2.innerHTML = item.username;
                    cell3.innerHTML = item.email;
                    cell4.innerHTML = item.phoneNo;
                    cell5.innerHTML = item.skillsets;
                    cell6.innerHTML = item.hobby;
                    cell7.innerHTML = `
                        <td style=""text-align:center"">
                            <a href=""#"" class=""ui-icon-pencil"" data-id=""${item.userid}"">
                                <span class=""glyphicon glyphicon-pencil"" onclick=""editRow('${item.userid}')""></span>
                            </a>
                            &nbsp;&nbsp;&nbsp;&nbsp;
                            <a hre");
                WriteLiteral(@"f=""#"" class=""ui-icon-trash"" data-id=""${item.userid}"">
                                <span class=""glyphicon glyphicon-trash"" onclick=""deleteRow('${item.userid}')""></span>
                            </a>
                        </td>
                    `;
                });
            });
        }

        // function updateUser() {
        //     // Get the updated data from input fields or other form elements
        //     const updatedData = {
        //         userid: // Get the user ID of the user you want to update,
        //         username: // Get the updated username,
        //         email: // Get the updated email,
        //         phoneNo: // Get the updated phone number,
        //         skillsets: // Get the updated skillsets,
        //         hobby: // Get the updated hobby
        //     };

        //     // Send a PUT request to your API
        //     fetch('http://localhost:25988/api/user', {
        //         method: 'PUT',
        //         heade");
                WriteLiteral(@"rs: {
        //             'Content-Type': 'application/json'
        //         },
        //         body: JSON.stringify(updatedData)
        //     })
        //         .then(response => {
        //             if (response.ok) {
        //                 // Update was successful
        //                 console.log('Update successful');
        //             } else {
        //                 // Handle errors
        //                 console.error('Update failed');
        //             }
        //         })
        //         .catch(error => console.error('Error:', error));
        // }

        </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a632c549bb647dc7d7d7e332f74fa964afabdad6450e1a617a626dd25285845720588", async() => {
                WriteLiteral(@"

    <h1>User Table</h1>

    <table class=""table table-hover table-bordered"" style=""margin-bottom: 0px;"" id=""customers"">
        <thead>
            <tr class=""td-datagrid-header"">
                <th style=""width:15%;"">
                    UserID  &nbsp;&nbsp;&nbsp;&nbsp;
                    <div id=""icon-container"" style=""background-color:white; display: inline-block; padding: 5px;"">
                    <a href=""#"" class=""ui-icon-plus"">
                        <span class=""glyphicon glyphicon-plus"" onclick=""addRow()""></span>
                    </a>
                    </div>
                </th>
                <th style=""width:15%;"">Username</th>
                <th style=""width:15%;"">Email</th>
                <th style=""width:15%;"">Phone Number</th>
                <th style=""width:15%;"">Skillsets</th>
                <th style=""width:15%;"">Hobby</th>
                <th style=""width:15%;"">Operation</th>
            </tr>
        </thead>
        <tbody id=""tby1"">
           ");
                WriteLiteral(@"
               
           
        </tbody>
    </table>
    <div>
        <input type=""hidden"" id=""h_userid"" />
        <input type=""hidden"" id=""h_username"" />
        <input type=""hidden"" id=""h_email"" />
        <input type=""hidden"" id=""h_phoneNo"" />
        <input type=""hidden"" id=""h_skillsets"" />
        <input type=""hidden"" id=""h_hobby"" />
        
    </div>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
